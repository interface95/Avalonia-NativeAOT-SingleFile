// AvaloniaApp.MessengerGenerator/Generators/MessengerGenerator.cs

using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace MessengerGenerator;

[Generator]
public class MessengerGenerator : IIncrementalGenerator
{
    #region IIncrementalGenerator Members

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var methods = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (node, _) => node is MethodDeclarationSyntax,
                static (ctx, _) =>
                {
                    var method = GetMethodIfAnnotated(ctx);
                    return (Method: method, ctx.SemanticModel);
                })
            .Where(static m => m.Method != null);

        context.RegisterSourceOutput(methods, (spc, tuple) =>
            GenerateRegistrationCode(spc, tuple.Method!, tuple.SemanticModel));
    }

    #endregion

    private static MethodDeclarationSyntax? GetMethodIfAnnotated(GeneratorSyntaxContext ctx)
    {
        var method = (MethodDeclarationSyntax)ctx.Node;
        var symbol = ctx.SemanticModel.GetDeclaredSymbol(method) as IMethodSymbol;
        return symbol?.GetAttributes().Any(a => a.AttributeClass?.Name == "MessageHandlerAttribute") == true
            ? method
            : null;
    }

    private static void GenerateRegistrationCode(
        SourceProductionContext context,
        MethodDeclarationSyntax method,
        SemanticModel semanticModel)
    {
        // 1. 获取方法符号
        if (semanticModel.GetDeclaredSymbol(method) is not IMethodSymbol methodSymbol ||
            methodSymbol.Parameters.Length == 0)
            return;

        // 2. 获取消息类型（完全限定名）
        var messageParameter = methodSymbol.Parameters[0];
        var messageType = messageParameter.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

        // 3. 获取 ViewModel 类名（完全限定名）
        var className = methodSymbol.ContainingType.ToDisplayString();

        // 4. 生成注册代码
        var code = $$"""
                     // <auto-generated/>
                     using CommunityToolkit.Mvvm.Messaging;

                     namespace Avalonia_NativeAOT_SingleFile;

                     public static partial class MessengerRegistrations
                     {
                         public static void Register{{methodSymbol.Name}}(object recipient)
                         {
                             WeakReferenceMessenger.Default.Register<{{messageType}}>(
                                 recipient: recipient,
                                 handler: (r, m) =>
                                 {
                                     if (r is {{className}} vm)
                                         vm.{{methodSymbol.Name}}(m);
                                 }
                             );
                         }
                     }
                     """;

        context.AddSource($"MessengerRegistrations_{methodSymbol.Name}.g.cs", code);
    }
}